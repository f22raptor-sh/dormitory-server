#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("webserver:server");
var fs = require("fs");
// var http = require("http");
var https = require("https");

const options = {
  key: fs.readFileSync(
    "/etc/letsencrypt/live/13.209.246.93.sslip.io/privkey.pem"
  ),
  cert: fs.readFileSync(
    "/etc/letsencrypt/live/13.209.246.93.sslip.io/fullchain.pem"
  ),
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "8080");
const host = "0.0.0.0"; // 모든 IP에서 들어오는 요청을 수신하도록 설정
app.set("port", port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get("port"), "0.0.0.0", () => {
  console.log(`서버가 포트 ${app.get("port")}에서 실행 중입니다.`);
});
/* server.listen(port, host, () => {
  console.log(`서버가 http://${host}:${port} 에서 실행 중입니다.`);
}); */
/* server.listen(port); */
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
